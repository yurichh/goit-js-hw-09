{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAYC,SAASC,cAAc,UACnCC,EAAOF,SAASC,cAAc,SA+BpC,SAASE,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAtCbH,EAAKW,iBAAiB,UAAU,SAAUC,GACxCA,EAAEC,iBACF,MAAMC,EAAQC,SAASf,EAAKD,cAAc,gBAAgBiB,OACpDC,EAAOF,SAASf,EAAKD,cAAc,eAAeiB,OAClDE,EAASH,SAASf,EAAKD,cAAc,iBAAiBiB,OAC5D,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,EAAS,EAEpC,YADAC,EAAAxB,GAASyB,OAAOC,QAAQ,+BAG1B,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,IAC1BrB,EAAcqB,EAAI,EAAGR,EAAQQ,EAAIL,GAC9BM,MAAK,EAACrB,SAAEA,EAAQC,MAAEA,MACjBgB,EAAAxB,GAASyB,OAAOI,QACd,uBAAqBtB,QAAiBC,MAAU,IAGnDsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MAClBgB,EAAAxB,GAASyB,OAAOM,QACd,sBAAoBxB,QAAeC,MAAU,IAIrDN,EAAU8B,UAAW,EACVjB,YAAW,KACpBb,EAAU8B,UAAW,EACrBR,EAAAxB,GAASyB,OAAOQ,KAAK,uCAAuC,IAC1DV,EAAS,GAAKD,EAAOH,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst btnSubmit = document.querySelector('button');\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', function (e) {\n  e.preventDefault();\n  const delay = parseInt(form.querySelector('[name=delay]').value);\n  const step = parseInt(form.querySelector('[name=step]').value);\n  const amount = parseInt(form.querySelector('[name=amount]').value);\n  if (delay < 0 || step < 0 || amount < 0) {\n    Notiflix.Notify.warning('Please choose a valid value');\n    return;\n  }\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay + i * step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  btnSubmit.disabled = true;\n  const id = setTimeout(() => {\n    btnSubmit.disabled = false;\n    Notiflix.Notify.info('Promise generator is available again');\n  }, (amount - 1) * step + delay);\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$btnSubmit","document","querySelector","$47d4ff9957288465$var$form","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","parseInt","value","step","amount","$parcel$interopDefault","Notify","warning","i","then","success","catch","failure","disabled","info"],"version":3,"file":"03-promises.43a30414.js.map"}